// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eth/v1alpha1/eth1_application.proto

package eth

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ApplicationPayload struct {
	BlockHash            []byte         `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty" ssz-size:"32"`
	Coinbase             []byte         `protobuf:"bytes,2,opt,name=coinbase,proto3" json:"coinbase,omitempty" ssz-size:"20"`
	StateRoot            []byte         `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty" ssz-size:"32"`
	GasLimit             uint64         `protobuf:"varint,4,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed              uint64         `protobuf:"varint,5,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	ReceiptRoot          []byte         `protobuf:"bytes,6,opt,name=receipt_root,json=receiptRoot,proto3" json:"receipt_root,omitempty" ssz-size:"32"`
	LogsBloom            [][]byte       `protobuf:"bytes,7,rep,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	Transactions         []*Transaction `protobuf:"bytes,8,rep,name=transactions,proto3" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ApplicationPayload) Reset()         { *m = ApplicationPayload{} }
func (m *ApplicationPayload) String() string { return proto.CompactTextString(m) }
func (*ApplicationPayload) ProtoMessage()    {}
func (*ApplicationPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_e806b27c88478613, []int{0}
}
func (m *ApplicationPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPayload.Merge(m, src)
}
func (m *ApplicationPayload) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPayload.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPayload proto.InternalMessageInfo

func (m *ApplicationPayload) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *ApplicationPayload) GetCoinbase() []byte {
	if m != nil {
		return m.Coinbase
	}
	return nil
}

func (m *ApplicationPayload) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *ApplicationPayload) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *ApplicationPayload) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *ApplicationPayload) GetReceiptRoot() []byte {
	if m != nil {
		return m.ReceiptRoot
	}
	return nil
}

func (m *ApplicationPayload) GetLogsBloom() [][]byte {
	if m != nil {
		return m.LogsBloom
	}
	return nil
}

func (m *ApplicationPayload) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type Transaction struct {
	Nounce               uint64   `protobuf:"varint,1,opt,name=nounce,proto3" json:"nounce,omitempty"`
	GasPrice             []byte   `protobuf:"bytes,2,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	GasLimit             uint64   `protobuf:"varint,3,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Recipient            []byte   `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty" ssz-size:"20"`
	Value                []byte   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Data                 [][]byte `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
	V                    []byte   `protobuf:"bytes,7,opt,name=v,proto3" json:"v,omitempty"`
	R                    []byte   `protobuf:"bytes,8,opt,name=r,proto3" json:"r,omitempty"`
	S                    []byte   `protobuf:"bytes,9,opt,name=s,proto3" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_e806b27c88478613, []int{1}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetNounce() uint64 {
	if m != nil {
		return m.Nounce
	}
	return 0
}

func (m *Transaction) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *Transaction) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *Transaction) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *Transaction) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Transaction) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Transaction) GetV() []byte {
	if m != nil {
		return m.V
	}
	return nil
}

func (m *Transaction) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *Transaction) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func init() {
	proto.RegisterType((*ApplicationPayload)(nil), "ethereum.eth.v1alpha1.ApplicationPayload")
	proto.RegisterType((*Transaction)(nil), "ethereum.eth.v1alpha1.Transaction")
}

func init() {
	proto.RegisterFile("eth/v1alpha1/eth1_application.proto", fileDescriptor_e806b27c88478613)
}

var fileDescriptor_e806b27c88478613 = []byte{
	// 516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x49, 0xdb, 0xed, 0x9f, 0x69, 0x3c, 0x38, 0x58, 0xc9, 0x2a, 0xd6, 0x12, 0x2f, 0xbd,
	0x34, 0xd9, 0x76, 0xc5, 0x83, 0x9e, 0x0c, 0x54, 0x3c, 0x28, 0x94, 0xa0, 0x17, 0x59, 0x08, 0x6f,
	0xa6, 0x63, 0x66, 0x30, 0xcd, 0x84, 0x99, 0x49, 0x61, 0xf7, 0x13, 0x89, 0x9f, 0x44, 0x3c, 0xf9,
	0x09, 0x44, 0x8a, 0x9f, 0xc0, 0xb3, 0x07, 0x99, 0x49, 0xbb, 0xed, 0x2e, 0xdd, 0xdb, 0xfb, 0x7b,
	0xf3, 0xe4, 0x7d, 0x98, 0x67, 0xde, 0x41, 0xcf, 0xa8, 0x66, 0xe1, 0x7a, 0x0a, 0x79, 0xc9, 0x60,
	0x1a, 0x52, 0xcd, 0xa6, 0x09, 0x94, 0x65, 0xce, 0x09, 0x68, 0x2e, 0x8a, 0xa0, 0x94, 0x42, 0x0b,
	0x3c, 0xa0, 0x9a, 0x51, 0x49, 0xab, 0x55, 0x40, 0x35, 0x0b, 0x76, 0xea, 0x47, 0x93, 0x8c, 0x6b,
	0x56, 0xa5, 0x01, 0x11, 0xab, 0x30, 0x13, 0x99, 0x08, 0xad, 0x3a, 0xad, 0x3e, 0x5b, 0xb2, 0x60,
	0xab, 0x7a, 0x8a, 0xff, 0xaf, 0x81, 0xf0, 0xeb, 0xfd, 0xec, 0x05, 0x5c, 0xe6, 0x02, 0x96, 0xf8,
	0x0c, 0xa1, 0x34, 0x17, 0xe4, 0x4b, 0xc2, 0x40, 0x31, 0xcf, 0x19, 0x39, 0x63, 0x37, 0xba, 0xff,
	0xf7, 0xd7, 0xd3, 0x7b, 0x4a, 0x5d, 0x4d, 0x14, 0xbf, 0xa2, 0x2f, 0xfd, 0xf3, 0x99, 0x1f, 0xf7,
	0xac, 0xe8, 0x2d, 0x28, 0x86, 0x27, 0xa8, 0x4b, 0x04, 0x2f, 0x52, 0x50, 0xd4, 0x6b, 0x1c, 0xd3,
	0xcf, 0xce, 0xfc, 0xf8, 0x5a, 0x62, 0x0c, 0x94, 0x06, 0x4d, 0x13, 0x29, 0x84, 0xf6, 0x9a, 0x77,
	0x1a, 0x58, 0x51, 0x2c, 0x84, 0xc6, 0x8f, 0x51, 0x2f, 0x03, 0x95, 0xe4, 0x7c, 0xc5, 0xb5, 0xd7,
	0x1a, 0x39, 0xe3, 0x56, 0xdc, 0xcd, 0x40, 0xbd, 0x33, 0x8c, 0x4f, 0x91, 0xa9, 0x93, 0x4a, 0xd1,
	0xa5, 0x77, 0x62, 0xbf, 0x75, 0x32, 0x50, 0x1f, 0x15, 0x5d, 0xe2, 0xe7, 0xc8, 0x95, 0x94, 0x50,
	0x5e, 0xea, 0xda, 0xab, 0x7d, 0x97, 0x57, 0x7f, 0x2b, 0xb3, 0x6e, 0x4f, 0x10, 0xca, 0x45, 0xa6,
	0x92, 0x34, 0x17, 0x62, 0xe5, 0x75, 0x46, 0xcd, 0xb1, 0x1b, 0xf7, 0x4c, 0x27, 0x32, 0x0d, 0xfc,
	0x06, 0xb9, 0x5a, 0x42, 0xa1, 0x80, 0x98, 0xd4, 0x94, 0xd7, 0x1d, 0x35, 0xc7, 0xfd, 0x99, 0x1f,
	0x1c, 0xbd, 0x93, 0xe0, 0xc3, 0x5e, 0x1a, 0xdf, 0xf8, 0xcf, 0xff, 0xe3, 0xa0, 0xfe, 0xc1, 0x57,
	0xfc, 0x10, 0xb5, 0x0b, 0x51, 0x15, 0x84, 0xda, 0xcc, 0x5b, 0xf1, 0x96, 0x76, 0x87, 0x2f, 0x25,
	0x27, 0xdb, 0x78, 0xed, 0xe1, 0x17, 0x86, 0x6f, 0x26, 0xd3, 0xbc, 0x95, 0x4c, 0x88, 0x7a, 0x92,
	0x12, 0x5e, 0x72, 0x5a, 0xd4, 0xb1, 0x1d, 0xbd, 0x98, 0xbd, 0x06, 0x3f, 0x40, 0x27, 0x6b, 0xc8,
	0x2b, 0x6a, 0x73, 0x74, 0xe3, 0x1a, 0x30, 0x46, 0xad, 0x25, 0x68, 0xf0, 0xda, 0x36, 0x09, 0x5b,
	0x63, 0x17, 0x39, 0x6b, 0xaf, 0x63, 0x55, 0xce, 0xda, 0x90, 0xf4, 0xba, 0x35, 0x49, 0x43, 0xca,
	0xeb, 0xd5, 0xa4, 0xa2, 0xaf, 0xce, 0xf7, 0xcd, 0xd0, 0xf9, 0xb9, 0x19, 0x3a, 0xbf, 0x37, 0x43,
	0x07, 0x9d, 0x0a, 0x99, 0x1d, 0x8f, 0x2a, 0x1a, 0x44, 0x14, 0x88, 0x28, 0x22, 0xb3, 0x57, 0xef,
	0xa9, 0xcc, 0xe8, 0xc2, 0xac, 0xe9, 0xc2, 0xf9, 0xf4, 0xe2, 0x60, 0xaf, 0x4b, 0x79, 0xa9, 0x56,
	0xa0, 0x39, 0xc9, 0x21, 0x55, 0xe1, 0x6e, 0x10, 0x94, 0xdc, 0xc2, 0xf5, 0xcb, 0x79, 0x45, 0x35,
	0xfb, 0xd6, 0x18, 0xcc, 0x77, 0x46, 0xf3, 0x03, 0xa3, 0x1f, 0xfb, 0xfe, 0xc5, 0x5c, 0xb3, 0x8b,
	0x5d, 0x3f, 0x6d, 0xdb, 0x77, 0x71, 0xfe, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xc6, 0xf5, 0x32,
	0x84, 0x03, 0x00, 0x00,
}

func (m *ApplicationPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEth1Application(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.LogsBloom) > 0 {
		for iNdEx := len(m.LogsBloom) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LogsBloom[iNdEx])
			copy(dAtA[i:], m.LogsBloom[iNdEx])
			i = encodeVarintEth1Application(dAtA, i, uint64(len(m.LogsBloom[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ReceiptRoot) > 0 {
		i -= len(m.ReceiptRoot)
		copy(dAtA[i:], m.ReceiptRoot)
		i = encodeVarintEth1Application(dAtA, i, uint64(len(m.ReceiptRoot)))
		i--
		dAtA[i] = 0x32
	}
	if m.GasUsed != 0 {
		i = encodeVarintEth1Application(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x28
	}
	if m.GasLimit != 0 {
		i = encodeVarintEth1Application(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x20
	}
	if len(m.StateRoot) > 0 {
		i -= len(m.StateRoot)
		copy(dAtA[i:], m.StateRoot)
		i = encodeVarintEth1Application(dAtA, i, uint64(len(m.StateRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Coinbase) > 0 {
		i -= len(m.Coinbase)
		copy(dAtA[i:], m.Coinbase)
		i = encodeVarintEth1Application(dAtA, i, uint64(len(m.Coinbase)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintEth1Application(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.S) > 0 {
		i -= len(m.S)
		copy(dAtA[i:], m.S)
		i = encodeVarintEth1Application(dAtA, i, uint64(len(m.S)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.R) > 0 {
		i -= len(m.R)
		copy(dAtA[i:], m.R)
		i = encodeVarintEth1Application(dAtA, i, uint64(len(m.R)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.V) > 0 {
		i -= len(m.V)
		copy(dAtA[i:], m.V)
		i = encodeVarintEth1Application(dAtA, i, uint64(len(m.V)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Data[iNdEx])
			copy(dAtA[i:], m.Data[iNdEx])
			i = encodeVarintEth1Application(dAtA, i, uint64(len(m.Data[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintEth1Application(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintEth1Application(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x22
	}
	if m.GasLimit != 0 {
		i = encodeVarintEth1Application(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GasPrice) > 0 {
		i -= len(m.GasPrice)
		copy(dAtA[i:], m.GasPrice)
		i = encodeVarintEth1Application(dAtA, i, uint64(len(m.GasPrice)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nounce != 0 {
		i = encodeVarintEth1Application(dAtA, i, uint64(m.Nounce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEth1Application(dAtA []byte, offset int, v uint64) int {
	offset -= sovEth1Application(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApplicationPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovEth1Application(uint64(l))
	}
	l = len(m.Coinbase)
	if l > 0 {
		n += 1 + l + sovEth1Application(uint64(l))
	}
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovEth1Application(uint64(l))
	}
	if m.GasLimit != 0 {
		n += 1 + sovEth1Application(uint64(m.GasLimit))
	}
	if m.GasUsed != 0 {
		n += 1 + sovEth1Application(uint64(m.GasUsed))
	}
	l = len(m.ReceiptRoot)
	if l > 0 {
		n += 1 + l + sovEth1Application(uint64(l))
	}
	if len(m.LogsBloom) > 0 {
		for _, b := range m.LogsBloom {
			l = len(b)
			n += 1 + l + sovEth1Application(uint64(l))
		}
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovEth1Application(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nounce != 0 {
		n += 1 + sovEth1Application(uint64(m.Nounce))
	}
	l = len(m.GasPrice)
	if l > 0 {
		n += 1 + l + sovEth1Application(uint64(l))
	}
	if m.GasLimit != 0 {
		n += 1 + sovEth1Application(uint64(m.GasLimit))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovEth1Application(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovEth1Application(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			l = len(b)
			n += 1 + l + sovEth1Application(uint64(l))
		}
	}
	l = len(m.V)
	if l > 0 {
		n += 1 + l + sovEth1Application(uint64(l))
	}
	l = len(m.R)
	if l > 0 {
		n += 1 + l + sovEth1Application(uint64(l))
	}
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovEth1Application(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEth1Application(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEth1Application(x uint64) (n int) {
	return sovEth1Application(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApplicationPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEth1Application
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Application
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Application
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coinbase", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Application
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Application
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coinbase = append(m.Coinbase[:0], dAtA[iNdEx:postIndex]...)
			if m.Coinbase == nil {
				m.Coinbase = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Application
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Application
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = append(m.StateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRoot == nil {
				m.StateRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Application
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Application
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptRoot = append(m.ReceiptRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ReceiptRoot == nil {
				m.ReceiptRoot = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsBloom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Application
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Application
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogsBloom = append(m.LogsBloom, make([]byte, postIndex-iNdEx))
			copy(m.LogsBloom[len(m.LogsBloom)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEth1Application
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Application
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &Transaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEth1Application(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEth1Application
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEth1Application
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEth1Application
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nounce", wireType)
			}
			m.Nounce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nounce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Application
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Application
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPrice = append(m.GasPrice[:0], dAtA[iNdEx:postIndex]...)
			if m.GasPrice == nil {
				m.GasPrice = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Application
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Application
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = append(m.Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recipient == nil {
				m.Recipient = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Application
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Application
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Application
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Application
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, make([]byte, postIndex-iNdEx))
			copy(m.Data[len(m.Data)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Application
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Application
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V = append(m.V[:0], dAtA[iNdEx:postIndex]...)
			if m.V == nil {
				m.V = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Application
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Application
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.R = append(m.R[:0], dAtA[iNdEx:postIndex]...)
			if m.R == nil {
				m.R = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Application
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Application
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S[:0], dAtA[iNdEx:postIndex]...)
			if m.S == nil {
				m.S = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEth1Application(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEth1Application
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEth1Application
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEth1Application(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEth1Application
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEth1Application
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEth1Application
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEth1Application
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEth1Application
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEth1Application        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEth1Application          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEth1Application = fmt.Errorf("proto: unexpected end of group")
)
