// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eth/v1alpha1/eth1_execution.proto

package eth

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExecutionPayload struct {
	BlockHash            []byte               `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty" ssz-size:"32"`
	ParentHash           []byte               `protobuf:"bytes,2,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty" ssz-size:"32"`
	Coinbase             []byte               `protobuf:"bytes,3,opt,name=coinbase,proto3" json:"coinbase,omitempty" ssz-size:"20"`
	StateRoot            []byte               `protobuf:"bytes,4,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty" ssz-size:"32"`
	Number               uint64               `protobuf:"varint,5,opt,name=number,proto3" json:"number,omitempty"`
	GasLimit             uint64               `protobuf:"varint,6,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed              uint64               `protobuf:"varint,7,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Timestamp            uint64               `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ReceiptRoot          []byte               `protobuf:"bytes,9,opt,name=receipt_root,json=receiptRoot,proto3" json:"receipt_root,omitempty" ssz-size:"32"`
	LogsBloom            []byte               `protobuf:"bytes,10,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty" ssz-size:"256"`
	Transactions         []*OpaqueTransaction `protobuf:"bytes,11,rep,name=transactions,proto3" json:"transactions,omitempty" ssz-max:"16384"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ExecutionPayload) Reset()         { *m = ExecutionPayload{} }
func (m *ExecutionPayload) String() string { return proto.CompactTextString(m) }
func (*ExecutionPayload) ProtoMessage()    {}
func (*ExecutionPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf8dc462c8d0a986, []int{0}
}
func (m *ExecutionPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionPayload.Merge(m, src)
}
func (m *ExecutionPayload) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionPayload.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionPayload proto.InternalMessageInfo

func (m *ExecutionPayload) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *ExecutionPayload) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *ExecutionPayload) GetCoinbase() []byte {
	if m != nil {
		return m.Coinbase
	}
	return nil
}

func (m *ExecutionPayload) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *ExecutionPayload) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ExecutionPayload) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *ExecutionPayload) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *ExecutionPayload) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ExecutionPayload) GetReceiptRoot() []byte {
	if m != nil {
		return m.ReceiptRoot
	}
	return nil
}

func (m *ExecutionPayload) GetLogsBloom() []byte {
	if m != nil {
		return m.LogsBloom
	}
	return nil
}

func (m *ExecutionPayload) GetTransactions() []*OpaqueTransaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type OpaqueTransaction struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" ssz-max:"1048576"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpaqueTransaction) Reset()         { *m = OpaqueTransaction{} }
func (m *OpaqueTransaction) String() string { return proto.CompactTextString(m) }
func (*OpaqueTransaction) ProtoMessage()    {}
func (*OpaqueTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf8dc462c8d0a986, []int{1}
}
func (m *OpaqueTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpaqueTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpaqueTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpaqueTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpaqueTransaction.Merge(m, src)
}
func (m *OpaqueTransaction) XXX_Size() int {
	return m.Size()
}
func (m *OpaqueTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_OpaqueTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_OpaqueTransaction proto.InternalMessageInfo

func (m *OpaqueTransaction) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ExecutionPayload)(nil), "ethereum.eth.v1alpha1.ExecutionPayload")
	proto.RegisterType((*OpaqueTransaction)(nil), "ethereum.eth.v1alpha1.OpaqueTransaction")
}

func init() { proto.RegisterFile("eth/v1alpha1/eth1_execution.proto", fileDescriptor_cf8dc462c8d0a986) }

var fileDescriptor_cf8dc462c8d0a986 = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xdf, 0x8e, 0xd2, 0x40,
	0x14, 0xc6, 0xd3, 0x5d, 0x64, 0x61, 0xc0, 0x3f, 0x8c, 0xc1, 0x74, 0xd5, 0x00, 0xf6, 0x0a, 0x2f,
	0x28, 0x7f, 0x17, 0x37, 0x6b, 0xe2, 0x45, 0x13, 0x12, 0x2f, 0x34, 0x92, 0x46, 0x6f, 0xcc, 0x26,
	0xcd, 0x69, 0x39, 0x76, 0x1a, 0xdb, 0x4e, 0xed, 0x4c, 0xcd, 0xee, 0xbe, 0x86, 0x2f, 0x61, 0x7c,
	0x12, 0xe3, 0x95, 0x4f, 0x40, 0x0c, 0x8f, 0xc0, 0x13, 0x98, 0x0e, 0xb0, 0x60, 0x84, 0xbb, 0x39,
	0xe7, 0xfc, 0xbe, 0x6f, 0xbe, 0xb4, 0x67, 0xc8, 0x33, 0x94, 0xac, 0xfb, 0xb5, 0x0f, 0x61, 0xc2,
	0xa0, 0xdf, 0x45, 0xc9, 0xfa, 0x0e, 0x5e, 0xa1, 0x97, 0xc9, 0x80, 0xc7, 0x66, 0x92, 0x72, 0xc9,
	0x69, 0x1d, 0x25, 0xc3, 0x14, 0xb3, 0xc8, 0x44, 0xc9, 0xcc, 0x0d, 0xfb, 0xb8, 0xe3, 0x07, 0x92,
	0x65, 0xae, 0xe9, 0xf1, 0xa8, 0xeb, 0x73, 0x9f, 0x77, 0x15, 0xed, 0x66, 0x9f, 0x54, 0xa5, 0x0a,
	0x75, 0x5a, 0xb9, 0x18, 0xdf, 0x0a, 0xe4, 0xc1, 0x64, 0xe3, 0x3c, 0x85, 0xeb, 0x90, 0xc3, 0x8c,
	0xf6, 0x08, 0x71, 0x43, 0xee, 0x7d, 0x76, 0x18, 0x08, 0xa6, 0x6b, 0x2d, 0xad, 0x5d, 0xb5, 0x6a,
	0xcb, 0x79, 0xf3, 0xae, 0x10, 0x37, 0x1d, 0x11, 0xdc, 0xe0, 0x85, 0x31, 0x1c, 0x18, 0x76, 0x59,
	0x41, 0xaf, 0x41, 0x30, 0x3a, 0x20, 0x95, 0x04, 0x52, 0x8c, 0xe5, 0x4a, 0x72, 0x74, 0x48, 0x42,
	0x56, 0x94, 0xd2, 0x74, 0x48, 0xc9, 0xe3, 0x41, 0xec, 0x82, 0x40, 0xfd, 0x78, 0x9f, 0x60, 0xd0,
	0x33, 0xec, 0x5b, 0x24, 0x0f, 0x25, 0x24, 0x48, 0x74, 0x52, 0xce, 0xa5, 0x5e, 0x38, 0x18, 0x4a,
	0x41, 0x36, 0xe7, 0x92, 0x3e, 0x22, 0xc5, 0x38, 0x8b, 0x5c, 0x4c, 0xf5, 0x3b, 0x2d, 0xad, 0x5d,
	0xb0, 0xd7, 0x15, 0x7d, 0x42, 0xca, 0x3e, 0x08, 0x27, 0x0c, 0xa2, 0x40, 0xea, 0x45, 0x35, 0x2a,
	0xf9, 0x20, 0xde, 0xe4, 0x35, 0x3d, 0x25, 0xf9, 0xd9, 0xc9, 0x04, 0xce, 0xf4, 0x13, 0x35, 0x3b,
	0xf1, 0x41, 0x7c, 0x10, 0x38, 0xa3, 0x4f, 0x49, 0x59, 0x06, 0x11, 0x0a, 0x09, 0x51, 0xa2, 0x97,
	0xd4, 0x6c, 0xdb, 0xa0, 0x23, 0x52, 0x4d, 0xd1, 0xc3, 0x20, 0x91, 0xab, 0x84, 0xe5, 0x43, 0x09,
	0x2b, 0x6b, 0x4c, 0x65, 0xec, 0x13, 0x12, 0x72, 0x5f, 0x38, 0x6e, 0xc8, 0x79, 0xa4, 0x13, 0xa5,
	0xa1, 0xcb, 0x79, 0xf3, 0xde, 0xce, 0x67, 0x38, 0x1b, 0x1b, 0x76, 0x39, 0xa7, 0xac, 0x1c, 0xa2,
	0x40, 0xaa, 0x32, 0x85, 0x58, 0x80, 0x97, 0xff, 0x33, 0xa1, 0x57, 0x5a, 0xc7, 0xed, 0xca, 0xa0,
	0x6d, 0xee, 0xdd, 0x07, 0xf3, 0x5d, 0x02, 0x5f, 0x32, 0x7c, 0xbf, 0x15, 0x58, 0x0f, 0x97, 0xf3,
	0xe6, 0xfd, 0xdc, 0x3e, 0x82, 0xab, 0x0b, 0xa3, 0x3f, 0x1e, 0x9e, 0x8f, 0x0c, 0xfb, 0x1f, 0x4b,
	0xe3, 0x15, 0xa9, 0xfd, 0xa7, 0xa3, 0xcf, 0x49, 0x61, 0x06, 0x12, 0xd6, 0xfb, 0x50, 0x5f, 0xce,
	0x9b, 0xb5, 0xad, 0x4b, 0x6f, 0x74, 0x7e, 0xf6, 0x62, 0x6c, 0xd8, 0x0a, 0xb1, 0xbe, 0x6b, 0x3f,
	0x17, 0x0d, 0xed, 0xf7, 0xa2, 0xa1, 0xfd, 0x59, 0x34, 0x34, 0x72, 0xca, 0x53, 0x7f, 0x7f, 0x3c,
	0xab, 0x6e, 0x21, 0x78, 0x3c, 0xb6, 0xf2, 0x4d, 0x7a, 0x8b, 0xa9, 0x8f, 0xd3, 0x7c, 0x2d, 0xa7,
	0xda, 0xc7, 0xf1, 0xce, 0x1e, 0x27, 0xe9, 0xb5, 0x88, 0x40, 0x06, 0x5e, 0x08, 0xae, 0xe8, 0x6e,
	0x8c, 0x20, 0x09, 0x54, 0x71, 0xfb, 0x4e, 0x5e, 0xa2, 0x64, 0x3f, 0x8e, 0xea, 0x93, 0xcd, 0x45,
	0x93, 0x9d, 0x8b, 0x7e, 0x6d, 0xfb, 0x97, 0x13, 0xc9, 0x2e, 0x37, 0x7d, 0xb7, 0xa8, 0xde, 0xc1,
	0xf0, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x3a, 0x3d, 0x8a, 0x72, 0x03, 0x00, 0x00,
}

func (m *ExecutionPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEth1Execution(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.LogsBloom) > 0 {
		i -= len(m.LogsBloom)
		copy(dAtA[i:], m.LogsBloom)
		i = encodeVarintEth1Execution(dAtA, i, uint64(len(m.LogsBloom)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ReceiptRoot) > 0 {
		i -= len(m.ReceiptRoot)
		copy(dAtA[i:], m.ReceiptRoot)
		i = encodeVarintEth1Execution(dAtA, i, uint64(len(m.ReceiptRoot)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Timestamp != 0 {
		i = encodeVarintEth1Execution(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x40
	}
	if m.GasUsed != 0 {
		i = encodeVarintEth1Execution(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x38
	}
	if m.GasLimit != 0 {
		i = encodeVarintEth1Execution(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x30
	}
	if m.Number != 0 {
		i = encodeVarintEth1Execution(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x28
	}
	if len(m.StateRoot) > 0 {
		i -= len(m.StateRoot)
		copy(dAtA[i:], m.StateRoot)
		i = encodeVarintEth1Execution(dAtA, i, uint64(len(m.StateRoot)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Coinbase) > 0 {
		i -= len(m.Coinbase)
		copy(dAtA[i:], m.Coinbase)
		i = encodeVarintEth1Execution(dAtA, i, uint64(len(m.Coinbase)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentHash) > 0 {
		i -= len(m.ParentHash)
		copy(dAtA[i:], m.ParentHash)
		i = encodeVarintEth1Execution(dAtA, i, uint64(len(m.ParentHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintEth1Execution(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OpaqueTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpaqueTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpaqueTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintEth1Execution(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEth1Execution(dAtA []byte, offset int, v uint64) int {
	offset -= sovEth1Execution(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExecutionPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovEth1Execution(uint64(l))
	}
	l = len(m.ParentHash)
	if l > 0 {
		n += 1 + l + sovEth1Execution(uint64(l))
	}
	l = len(m.Coinbase)
	if l > 0 {
		n += 1 + l + sovEth1Execution(uint64(l))
	}
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovEth1Execution(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovEth1Execution(uint64(m.Number))
	}
	if m.GasLimit != 0 {
		n += 1 + sovEth1Execution(uint64(m.GasLimit))
	}
	if m.GasUsed != 0 {
		n += 1 + sovEth1Execution(uint64(m.GasUsed))
	}
	if m.Timestamp != 0 {
		n += 1 + sovEth1Execution(uint64(m.Timestamp))
	}
	l = len(m.ReceiptRoot)
	if l > 0 {
		n += 1 + l + sovEth1Execution(uint64(l))
	}
	l = len(m.LogsBloom)
	if l > 0 {
		n += 1 + l + sovEth1Execution(uint64(l))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovEth1Execution(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OpaqueTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEth1Execution(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEth1Execution(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEth1Execution(x uint64) (n int) {
	return sovEth1Execution(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExecutionPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEth1Execution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Execution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Execution
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Execution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Execution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Execution
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Execution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentHash = append(m.ParentHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentHash == nil {
				m.ParentHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coinbase", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Execution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Execution
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Execution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coinbase = append(m.Coinbase[:0], dAtA[iNdEx:postIndex]...)
			if m.Coinbase == nil {
				m.Coinbase = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Execution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Execution
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Execution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = append(m.StateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRoot == nil {
				m.StateRoot = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Execution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Execution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Execution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Execution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Execution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Execution
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Execution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptRoot = append(m.ReceiptRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ReceiptRoot == nil {
				m.ReceiptRoot = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsBloom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Execution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Execution
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Execution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogsBloom = append(m.LogsBloom[:0], dAtA[iNdEx:postIndex]...)
			if m.LogsBloom == nil {
				m.LogsBloom = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Execution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEth1Execution
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Execution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &OpaqueTransaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEth1Execution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEth1Execution
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEth1Execution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpaqueTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEth1Execution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpaqueTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpaqueTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEth1Execution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEth1Execution
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEth1Execution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEth1Execution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEth1Execution
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEth1Execution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEth1Execution(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEth1Execution
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEth1Execution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEth1Execution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEth1Execution
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEth1Execution
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEth1Execution
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEth1Execution        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEth1Execution          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEth1Execution = fmt.Errorf("proto: unexpected end of group")
)
